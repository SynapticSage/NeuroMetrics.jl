function [ out ] = calcConvexHullofPlacefields( animaldir, animalprefix, cells, varargin )
%PLACEFIELD Allows one to ID the times an animal
%is is some subset of placefields. It can be used either as a time filter
%for all cells or as a stand-alone function to store per all cells times
%when the animal is inside the convex hull defining a field
%
%   Per listed cell one or more convex hulls of the place field(s) are
%   found. It does this under control of a threshold parameter: either raw
%   value or normalized value. Then. this algorithm finds the set of convex
%   hulls for that threshold. If it's more than one, a condition lets you
%   filter out the largest convex hull.
%
%   --- Params ---
%
% TODO Sarel et al 2017 -- add expansion of hull by 2 bins to ensure no
% in-field spikes
% TODO add multiple area mode
% TODO add field area and field percent, such that can filter based on
% field co

threshold = 1; %hz/occ
thresholdtype = 'halfpeak';
oneormult = 'one';
largestneighborhoodnum = inf; % if a number less than inf, algo finds the largest n connected regions, before finding the convex hull
mapfields = [];
checkmode = false;
optlistassign(who,varargin);


if ~isstruct(cells)
    if isempty(mapfields)
      mapfields = loaddatastruct(animaldir,animalprefix,'mapfields',unique(cells(:,1)));
    end
    cnt=0;
    for c = cells'
        cnt=cnt+1;
        fprintf('Generating %s %d %d %d %d\n',animalprefix,c(:));
        out{c(1)}{c(2)}{c(3)}{c(4)}=calcConvexHullofPlacefields(animaldir,animalprefix,mapfields{c(1)}{c(2)}{c(3)}{c(4)},varargin{:});
    end
else
    mapfield=cells; % it's a mapfield then

    % Take the mapfields and acquire occ norm firing rate
    % (1) Acquire the spike rate
    sr = mapfield.smoothedspikerate;
    % (2) Occupancy
    occ = mapfield.smoothedoccupancy;
    % (3) Occ norm fields
    occsr = sr ./ occ;
    % (4) Record where values are negative or infinite and remove them.
    impossiblevals = occsr==inf|occsr==-inf|occsr<0;
    occsr(impossiblevals) = 0;

    switch thresholdtype
       case 'halfpeak' % same used by Sarel et al. 2017
%        threshold = max(max(mapfield.spikerate))/2;
       threshold = max(max(sr))/2;
    end

    % Now, figure all above threshold values
    abovethreshold = occsr >= threshold;
    %abovethreshold = mapfield.spikerate >= threshold;

    out.occspikerate = occsr;
    out.spikerate = mapfield.smoothedspikerate;
    out.abovethresh = abovethreshold;
    out.xticks=mapfield.xticks;
    out.yticks=mapfield.yticks;

    switch oneormult
    case 'one' % in this case, we're creating one giant convex hull
      % Filter out disconnected regions
      if largestneighborhoodnum<inf
          % Get list of contiguous regions
          areas = bwconncomp(abovethreshold);
          % Find the N largest
          areasizes = cellfun(@numel,areas.PixelIdxList);
          % Which largest?
          areasizes = [1:numel(areasizes); areasizes]';
          areasizes=sortrows(areasizes,2,'descend');
          nonlargestregions = areasizes(largestneighborhoodnum+1:end,1);
          % Now zero out anything not apart of these large regions
          abovethreshold(cat(1,areas.PixelIdxList{nonlargestregions}))=0;
      end
      [aty{1}, atx{1}]= find(abovethreshold);
    case 'mult' % in this case, we're making one convex hull PER contiguous region, as may be more natural in the case of non-open field tracks

      % Get list of contiguous regions
      areas = bwconncomp(abovethreshold);
      % Find the N largest
      areasizes = cellfun(@numel,areas.PixelIdxList);
      % Which largest?
      areasizes = [1:numel(areasizes); areasizes];
      areasizes=sortrows(areasizes',1);
      nonlargestregions = areasizes(largestneighborhoodnum+1:end,1);
      % Now, per region, largest to smallest, find a convex hull!
      %for i = 1:largest

      if largestneighborhoodnum < inf
      else
      end

    end

    skiptestplot=false;
    try
    % Last, find the convex hull that encapsulates the set of all above
    % threshold points
    nRegions = numel(atx);
    for i = 1:nRegions
        hull            = convhull(atx{i},aty{i});
        out.indconvhull{i} = [atx{i}(hull), aty{i}(hull)];
        % Now just to be nice, lets include a polygon of indices AND of the xy
        % animal positions, so that users can easily find points in the place
        % field using polygonin
        out.posconvhull{i} = [mapfield.xticks(atx{i}(hull)); mapfield.yticks(aty{i}(hull))]';
    end
    if nRegions
        out.indconvhull = out.indconvhull{1};
        out.posconvhull = out.posconvhull{1};
    end
        
    catch ME
      ME
      skiptestplot=true;
      fprintf('cannot find hull\n');
      out.indconvhull=[];
      out.posconvhull=[];
    end

    out.settings.largestneighborhoodnum = largestneighborhoodnum;
    out.settings.threshold = threshold;
    out.settings.thresholdtype = thresholdtype;
    out.settings.dateproduced = date;


    % Mode for examining the output to be sure that the place fields are
    % falling inside of the convex hull.
    if checkmode && ~skiptestplot
        if isfield(out,'posconvhull')
            plotelement(out);
            keyboard
        end
    end

end

end

function plotelement(chull)
    % FILL ME IN
    nestplot(2,2,1,'xspacing',0.1);
    singleplot(chull,'spikerate');
    xax=get(gca,'xaxis');xax.Visible='off';
    nestplot(2,2,3);
    singleplot(chull,'occspikerate');
    nestplot(2,2,{1:2,2});
    singleplot(chull,'abovethresh');


    function singleplot(chull,what)
        hold off;
        imagesc(chull.xticks,chull.yticks,chull.(what));
        axis( [min(chull.xticks) max(chull.xticks) min(chull.yticks) max(chull.yticks)]);
        hold on;
        p=plot(chull.posconvhull(:,1),chull.posconvhull(:,2),'w-','linewidth',2,'markersize',1,'markerfacecolor','white');
        hold on;
        text(chull.posconvhull(end,1),chull.posconvhull(end,2),'Infield','Color','white','FontSize',14);
        title(what);
    end
end
